//! Generate Sudoku puzzles which have a unique solution, using brute-force.

use rand::prelude::*;

mod brute_force;

const BLOCK_1_INDICES: &'static[usize; 9] = &[0, 1, 2, 9, 10, 11, 18, 19, 20];

const BAND_1_INDICES: &'static[&'static[usize; 3]; 6] = &[
    &[3, 4, 5], &[12, 13, 14], &[21, 22, 23], &[6, 7, 8], &[15, 16, 17], &[24, 25, 26],
];

const STACK_1_INDICES: &'static[&'static[usize; 3]; 6] = &[
    &[27, 36, 45], &[28, 37, 46], &[29, 38, 47], &[54, 63, 72], &[55, 64, 73], &[56, 65, 74],
];

const BAND_1_CHOICES: &'static[&'static[&'static[usize; 3]; 6]; 56] = &[
    &[&[9, 10, 11], &[18, 19, 20], &[0, 1, 2], &[18, 19, 20], &[0, 1, 2], &[9, 10, 11]],
    &[&[18, 19, 20], &[0, 1, 2], &[9, 10, 11], &[9, 10, 11], &[18, 19, 20], &[0, 1, 2]],
    &[&[9, 19, 20], &[18, 1, 2], &[0, 10, 11], &[10, 11, 18], &[0, 19, 20], &[1, 2, 9]],
    &[&[9, 18, 20], &[19, 1, 2], &[0, 10, 11], &[10, 11, 19], &[0, 18, 20], &[1, 2, 9]],
    &[&[9, 18, 19], &[20, 1, 2], &[0, 10, 11], &[10, 11, 20], &[0, 18, 19], &[1, 2, 9]],
    &[&[10, 19, 20], &[18, 1, 2], &[0, 9, 11], &[9, 11, 18], &[0, 19, 20], &[1, 2, 10]],
    &[&[10, 18, 20], &[19, 1, 2], &[0, 9, 11], &[9, 11, 19], &[0, 18, 20], &[1, 2, 10]],
    &[&[10, 18, 19], &[20, 1, 2], &[0, 9, 11], &[9, 11, 20], &[0, 18, 19], &[1, 2, 10]],
    &[&[11, 19, 20], &[18, 1, 2], &[0, 9, 10], &[9, 10, 18], &[0, 19, 20], &[1, 2, 11]],
    &[&[11, 18, 20], &[19, 1, 2], &[0, 9, 10], &[9, 10, 19], &[0, 18, 20], &[1, 2, 11]],
    &[&[11, 18, 19], &[20, 1, 2], &[0, 9, 10], &[9, 10, 20], &[0, 18, 19], &[1, 2, 11]],
    &[&[9, 19, 20], &[18, 0, 2], &[1, 10, 11], &[10, 11, 18], &[1, 19, 20], &[0, 2, 9]],
    &[&[9, 18, 20], &[19, 0, 2], &[1, 10, 11], &[10, 11, 19], &[1, 18, 20], &[0, 2, 9]],
    &[&[9, 18, 19], &[20, 0, 2], &[1, 10, 11], &[10, 11, 20], &[1, 18, 19], &[0, 2, 9]],
    &[&[10, 19, 20], &[18, 0, 2], &[1, 9, 11], &[9, 11, 18], &[1, 19, 20], &[0, 2, 10]],
    &[&[10, 18, 20], &[19, 0, 2], &[1, 9, 11], &[9, 11, 19], &[1, 18, 20], &[0, 2, 10]],
    &[&[10, 18, 19], &[20, 0, 2], &[1, 9, 11], &[9, 11, 20], &[1, 18, 19], &[0, 2, 10]],
    &[&[11, 19, 20], &[18, 0, 2], &[1, 9, 10], &[9, 10, 18], &[1, 19, 20], &[0, 2, 11]],
    &[&[11, 18, 20], &[19, 0, 2], &[1, 9, 10], &[9, 10, 19], &[1, 18, 20], &[0, 2, 11]],
    &[&[11, 18, 19], &[20, 0, 2], &[1, 9, 10], &[9, 10, 20], &[1, 18, 19], &[0, 2, 11]],
    &[&[9, 19, 20], &[18, 0, 1], &[2, 10, 11], &[10, 11, 18], &[2, 19, 20], &[0, 1, 9]],
    &[&[9, 18, 20], &[19, 0, 1], &[2, 10, 11], &[10, 11, 19], &[2, 18, 20], &[0, 1, 9]],
    &[&[9, 18, 19], &[20, 0, 1], &[2, 10, 11], &[10, 11, 20], &[2, 18, 19], &[0, 1, 9]],
    &[&[10, 19, 20], &[18, 0, 1], &[2, 9, 11], &[9, 11, 18], &[2, 19, 20], &[0, 1, 10]],
    &[&[10, 18, 20], &[19, 0, 1], &[2, 9, 11], &[9, 11, 19], &[2, 18, 20], &[0, 1, 10]],
    &[&[10, 18, 19], &[20, 0, 1], &[2, 9, 11], &[9, 11, 20], &[2, 18, 19], &[0, 1, 10]],
    &[&[11, 19, 20], &[18, 0, 1], &[2, 9, 10], &[9, 10, 18], &[2, 19, 20], &[0, 1, 11]],
    &[&[11, 18, 20], &[19, 0, 1], &[2, 9, 10], &[9, 10, 19], &[2, 18, 20], &[0, 1, 11]],
    &[&[11, 18, 19], &[20, 0, 1], &[2, 9, 10], &[9, 10, 20], &[2, 18, 19], &[0, 1, 11]],
    &[&[18, 10, 11], &[0, 19, 20], &[9, 1, 2], &[9, 19, 20], &[1, 2, 18], &[0, 10, 11]],
    &[&[19, 10, 11], &[0, 18, 20], &[9, 1, 2], &[9, 18, 20], &[1, 2, 19], &[0, 10, 11]],
    &[&[20, 10, 11], &[0, 18, 19], &[9, 1, 2], &[9, 18, 19], &[1, 2, 20], &[0, 10, 11]],
    &[&[18, 9, 11], &[0, 19, 20], &[10, 1, 2], &[10, 19, 20], &[1, 2, 18], &[0, 9, 11]],
    &[&[19, 9, 11], &[0, 18, 20], &[10, 1, 2], &[10, 18, 20], &[1, 2, 19], &[0, 9, 11]],
    &[&[20, 9, 11], &[0, 18, 19], &[10, 1, 2], &[10, 18, 19], &[1, 2, 20], &[0, 9, 11]],
    &[&[18, 9, 10], &[0, 19, 20], &[11, 1, 2], &[11, 19, 20], &[1, 2, 18], &[0, 9, 10]],
    &[&[19, 9, 10], &[0, 18, 20], &[11, 1, 2], &[11, 18, 20], &[1, 2, 19], &[0, 9, 10]],
    &[&[20, 9, 10], &[0, 18, 19], &[11, 1, 2], &[11, 18, 19], &[1, 2, 20], &[0, 9, 10]],
    &[&[18, 10, 11], &[1, 19, 20], &[9, 0, 2], &[9, 19, 20], &[0, 2, 18], &[1, 10, 11]],
    &[&[19, 10, 11], &[1, 18, 20], &[9, 0, 2], &[9, 18, 20], &[0, 2, 19], &[1, 10, 11]],
    &[&[20, 10, 11], &[1, 18, 19], &[9, 0, 2], &[9, 18, 19], &[0, 2, 20], &[1, 10, 11]],
    &[&[18, 9, 11], &[1, 19, 20], &[10, 0, 2], &[10, 19, 20], &[0, 2, 18], &[1, 9, 11]],
    &[&[19, 9, 11], &[1, 18, 20], &[10, 0, 2], &[10, 18, 20], &[0, 2, 19], &[1, 9, 11]],
    &[&[20, 9, 11], &[1, 18, 19], &[10, 0, 2], &[10, 18, 19], &[0, 2, 20], &[1, 9, 11]],
    &[&[18, 9, 10], &[1, 19, 20], &[11, 0, 2], &[11, 19, 20], &[0, 2, 18], &[1, 9, 10]],
    &[&[19, 9, 10], &[1, 18, 20], &[11, 0, 2], &[11, 18, 20], &[0, 2, 19], &[1, 9, 10]],
    &[&[20, 9, 10], &[1, 18, 19], &[11, 0, 2], &[11, 18, 19], &[0, 2, 20], &[1, 9, 10]],
    &[&[18, 10, 11], &[2, 19, 20], &[9, 0, 1], &[9, 19, 20], &[0, 1, 18], &[2, 10, 11]],
    &[&[19, 10, 11], &[2, 18, 20], &[9, 0, 1], &[9, 18, 20], &[0, 1, 19], &[2, 10, 11]],
    &[&[20, 10, 11], &[2, 18, 19], &[9, 0, 1], &[9, 18, 19], &[0, 1, 20], &[2, 10, 11]],
    &[&[18, 9, 11], &[2, 19, 20], &[10, 0, 1], &[10, 19, 20], &[0, 1, 18], &[2, 9, 11]],
    &[&[19, 9, 11], &[2, 18, 20], &[10, 0, 1], &[10, 18, 20], &[0, 1, 19], &[2, 9, 11]],
    &[&[20, 9, 11], &[2, 18, 19], &[10, 0, 1], &[10, 18, 19], &[0, 1, 20], &[2, 9, 11]],
    &[&[18, 9, 10], &[2, 19, 20], &[11, 0, 1], &[11, 19, 20], &[0, 1, 18], &[2, 9, 10]],
    &[&[19, 9, 10], &[2, 18, 20], &[11, 0, 1], &[11, 18, 20], &[0, 1, 19], &[2, 9, 10]],
    &[&[20, 9, 10], &[2, 18, 19], &[11, 0, 1], &[11, 18, 19], &[0, 1, 20], &[2, 9, 10]],
];

const STACK_1_CHOICES: &'static[&'static[&'static[usize; 3]; 6]; 56] = &[
    &[&[1, 10, 19], &[2, 11, 20], &[0, 9, 18], &[2, 11, 20], &[0, 9, 18], &[1, 10, 19]],
    &[&[2, 11, 20], &[0, 9, 18], &[1, 10, 19], &[1, 10, 19], &[2, 11, 20], &[0, 9, 18]],
    &[&[1, 11, 20], &[2, 9, 18], &[0, 10, 19], &[10, 19, 2], &[0, 11, 20], &[9, 18, 1]],
    &[&[1, 2, 20], &[11, 9, 18], &[0, 10, 19], &[10, 19, 11], &[0, 2, 20], &[9, 18, 1]],
    &[&[1, 2, 11], &[20, 9, 18], &[0, 10, 19], &[10, 19, 20], &[0, 2, 11], &[9, 18, 1]],
    &[&[10, 11, 20], &[2, 9, 18], &[0, 1, 19], &[1, 19, 2], &[0, 11, 20], &[9, 18, 10]],
    &[&[10, 2, 20], &[11, 9, 18], &[0, 1, 19], &[1, 19, 11], &[0, 2, 20], &[9, 18, 10]],
    &[&[10, 2, 11], &[20, 9, 18], &[0, 1, 19], &[1, 19, 20], &[0, 2, 11], &[9, 18, 10]],
    &[&[19, 11, 20], &[2, 9, 18], &[0, 1, 10], &[1, 10, 2], &[0, 11, 20], &[9, 18, 19]],
    &[&[19, 2, 20], &[11, 9, 18], &[0, 1, 10], &[1, 10, 11], &[0, 2, 20], &[9, 18, 19]],
    &[&[19, 2, 11], &[20, 9, 18], &[0, 1, 10], &[1, 10, 20], &[0, 2, 11], &[9, 18, 19]],
    &[&[1, 11, 20], &[2, 0, 18], &[9, 10, 19], &[10, 19, 2], &[9, 11, 20], &[0, 18, 1]],
    &[&[1, 2, 20], &[11, 0, 18], &[9, 10, 19], &[10, 19, 11], &[9, 2, 20], &[0, 18, 1]],
    &[&[1, 2, 11], &[20, 0, 18], &[9, 10, 19], &[10, 19, 20], &[9, 2, 11], &[0, 18, 1]],
    &[&[10, 11, 20], &[2, 0, 18], &[9, 1, 19], &[1, 19, 2], &[9, 11, 20], &[0, 18, 10]],
    &[&[10, 2, 20], &[11, 0, 18], &[9, 1, 19], &[1, 19, 11], &[9, 2, 20], &[0, 18, 10]],
    &[&[10, 2, 11], &[20, 0, 18], &[9, 1, 19], &[1, 19, 20], &[9, 2, 11], &[0, 18, 10]],
    &[&[19, 11, 20], &[2, 0, 18], &[9, 1, 10], &[1, 10, 2], &[9, 11, 20], &[0, 18, 19]],
    &[&[19, 2, 20], &[11, 0, 18], &[9, 1, 10], &[1, 10, 11], &[9, 2, 20], &[0, 18, 19]],
    &[&[19, 2, 11], &[20, 0, 18], &[9, 1, 10], &[1, 10, 20], &[9, 2, 11], &[0, 18, 19]],
    &[&[1, 11, 20], &[2, 0, 9], &[18, 10, 19], &[10, 19, 2], &[18, 11, 20], &[0, 9, 1]],
    &[&[1, 2, 20], &[11, 0, 9], &[18, 10, 19], &[10, 19, 11], &[18, 2, 20], &[0, 9, 1]],
    &[&[1, 2, 11], &[20, 0, 9], &[18, 10, 19], &[10, 19, 20], &[18, 2, 11], &[0, 9, 1]],
    &[&[10, 11, 20], &[2, 0, 9], &[18, 1, 19], &[1, 19, 2], &[18, 11, 20], &[0, 9, 10]],
    &[&[10, 2, 20], &[11, 0, 9], &[18, 1, 19], &[1, 19, 11], &[18, 2, 20], &[0, 9, 10]],
    &[&[10, 2, 11], &[20, 0, 9], &[18, 1, 19], &[1, 19, 20], &[18, 2, 11], &[0, 9, 10]],
    &[&[19, 11, 20], &[2, 0, 9], &[18, 1, 10], &[1, 10, 2], &[18, 11, 20], &[0, 9, 19]],
    &[&[19, 2, 20], &[11, 0, 9], &[18, 1, 10], &[1, 10, 11], &[18, 2, 20], &[0, 9, 19]],
    &[&[19, 2, 11], &[20, 0, 9], &[18, 1, 10], &[1, 10, 20], &[18, 2, 11], &[0, 9, 19]],
    &[&[2, 10, 19], &[0, 11, 20], &[1, 9, 18], &[1, 11, 20], &[9, 18, 2], &[0, 10, 19]],
    &[&[11, 10, 19], &[0, 2, 20], &[1, 9, 18], &[1, 2, 20], &[9, 18, 11], &[0, 10, 19]],
    &[&[20, 10, 19], &[0, 2, 11], &[1, 9, 18], &[1, 2, 11], &[9, 18, 20], &[0, 10, 19]],
    &[&[2, 1, 19], &[0, 11, 20], &[10, 9, 18], &[10, 11, 20], &[9, 18, 2], &[0, 1, 19]],
    &[&[11, 1, 19], &[0, 2, 20], &[10, 9, 18], &[10, 2, 20], &[9, 18, 11], &[0, 1, 19]],
    &[&[20, 1, 19], &[0, 2, 11], &[10, 9, 18], &[10, 2, 11], &[9, 18, 20], &[0, 1, 19]],
    &[&[2, 1, 10], &[0, 11, 20], &[19, 9, 18], &[19, 11, 20], &[9, 18, 2], &[0, 1, 10]],
    &[&[11, 1, 10], &[0, 2, 20], &[19, 9, 18], &[19, 2, 20], &[9, 18, 11], &[0, 1, 10]],
    &[&[20, 1, 10], &[0, 2, 11], &[19, 9, 18], &[19, 2, 11], &[9, 18, 20], &[0, 1, 10]],
    &[&[2, 10, 19], &[9, 11, 20], &[1, 0, 18], &[1, 11, 20], &[0, 18, 2], &[9, 10, 19]],
    &[&[11, 10, 19], &[9, 2, 20], &[1, 0, 18], &[1, 2, 20], &[0, 18, 11], &[9, 10, 19]],
    &[&[20, 10, 19], &[9, 2, 11], &[1, 0, 18], &[1, 2, 11], &[0, 18, 20], &[9, 10, 19]],
    &[&[2, 1, 19], &[9, 11, 20], &[10, 0, 18], &[10, 11, 20], &[0, 18, 2], &[9, 1, 19]],
    &[&[11, 1, 19], &[9, 2, 20], &[10, 0, 18], &[10, 2, 20], &[0, 18, 11], &[9, 1, 19]],
    &[&[20, 1, 19], &[9, 2, 11], &[10, 0, 18], &[10, 2, 11], &[0, 18, 20], &[9, 1, 19]],
    &[&[2, 1, 10], &[9, 11, 20], &[19, 0, 18], &[19, 11, 20], &[0, 18, 2], &[9, 1, 10]],
    &[&[11, 1, 10], &[9, 2, 20], &[19, 0, 18], &[19, 2, 20], &[0, 18, 11], &[9, 1, 10]],
    &[&[20, 1, 10], &[9, 2, 11], &[19, 0, 18], &[19, 2, 11], &[0, 18, 20], &[9, 1, 10]],
    &[&[2, 10, 19], &[18, 11, 20], &[1, 0, 9], &[1, 11, 20], &[0, 9, 2], &[18, 10, 19]],
    &[&[11, 10, 19], &[18, 2, 20], &[1, 0, 9], &[1, 2, 20], &[0, 9, 11], &[18, 10, 19]],
    &[&[20, 10, 19], &[18, 2, 11], &[1, 0, 9], &[1, 2, 11], &[0, 9, 20], &[18, 10, 19]],
    &[&[2, 1, 19], &[18, 11, 20], &[10, 0, 9], &[10, 11, 20], &[0, 9, 2], &[18, 1, 19]],
    &[&[11, 1, 19], &[18, 2, 20], &[10, 0, 9], &[10, 2, 20], &[0, 9, 11], &[18, 1, 19]],
    &[&[20, 1, 19], &[18, 2, 11], &[10, 0, 9], &[10, 2, 11], &[0, 9, 20], &[18, 1, 19]],
    &[&[2, 1, 10], &[18, 11, 20], &[19, 0, 9], &[19, 11, 20], &[0, 9, 2], &[18, 1, 10]],
    &[&[11, 1, 10], &[18, 2, 20], &[19, 0, 9], &[19, 2, 20], &[0, 9, 11], &[18, 1, 10]],
    &[&[20, 1, 10], &[18, 2, 11], &[19, 0, 9], &[19, 2, 11], &[0, 9, 20], &[18, 1, 10]],
];

pub fn generate_minimal_puzzle() -> Vec<usize> {
    let mut solution = generate_solved_grid();

    let mut cell_order: Vec<_> = (0..solution.len()).collect();
    thread_rng().shuffle(&mut cell_order);

    for cell in cell_order {
        let clue = solution[cell];
        solution[cell] = 0;
        if !brute_force::has_unique_solution(&solution) { solution[cell] = clue; }
    }

    solution
}

pub fn generate_minimal_symmetric_puzzle() -> Vec<usize> {
    let mut solution = generate_solved_grid();

    let mut cell_order: Vec<_> = (0..(solution.len() + 1) / 2).collect();
    thread_rng().shuffle(&mut cell_order);

    for cell in cell_order {
        let (cell1, cell2) = (cell, solution.len() - cell - 1);
        let (clue1, clue2) = (solution[cell1], solution[cell2]);
        solution[cell1] = 0; solution[cell2] = 0;
        if !brute_force::has_unique_solution(&solution) { solution[cell1] = clue1; solution[cell2] = clue2; }
    }

    solution
}

pub fn generate_puzzle_with_pattern(pattern: &[bool; 81]) -> Vec<usize> {
    loop {
        let mut solution = generate_solved_grid();
        for (cell, val) in pattern.iter().enumerate() {
            if !val { solution[cell] = 0; }
        }
        if brute_force::has_unique_solution(&solution) {
            return solution;
        }
    }
}

fn generate_solved_grid() -> Vec<usize> {
    let mut cells = vec![0; 81];
    let mut values = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];
    thread_rng().shuffle(&mut values);
    for (&idx, &value) in BLOCK_1_INDICES.iter().zip(values.iter()) {
        cells[idx] = value;
    }

    let band_choice = thread_rng().choose(BAND_1_CHOICES).unwrap();
    for (group, indices) in band_choice.iter().zip(BAND_1_INDICES) {
        let mut shuffled_group = group.to_vec(); thread_rng().shuffle(&mut shuffled_group);
        for (&idx, &other_idx) in indices.iter().zip(shuffled_group.iter()) {
            cells[idx] = cells[other_idx];
        }
    }

    let stack_choice = thread_rng().choose(STACK_1_CHOICES).unwrap();
    for (group, indices) in stack_choice.iter().zip(STACK_1_INDICES) {
        let mut shuffled_group = group.to_vec(); thread_rng().shuffle(&mut shuffled_group);
        for (&idx, &other_idx) in indices.iter().zip(shuffled_group.iter()) {
            cells[idx] = cells[other_idx];
        }
    }

    brute_force::random_solution(&cells).unwrap()
}
